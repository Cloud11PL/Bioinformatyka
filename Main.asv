clear all;
clc;

% sequenceCluster = [
%     "GCACAT", "a";
%     "TGAGA", "b";
%     "GACA", "c";
%     "GAACT","d"];

%Niestety pomimo faktu g??bokich stara? i wielu wielu godzinach pracy na
%tym zadaniem, nie wiem dlaczego, nie dzia?a on poprawnie dla du?ych
%sekwencji. Najprawdopodobniej mam problem w algorytmie, którego nie
%potrafi? zlokalizowa?.

disp('Choose the method.');
disp('1. From file');
disp('2. From database');

more = true;
sequenceCluster = struct;
i = 1;
while more
    method = input('Your choice (type 0 to finish):');
    if (method == 0)
        more = false;
    else
        seq = getFasta(method);
        sequenceCluster.("sequence_" + i) = [seq.sequence];
        %Tylko dlatego, bo struct nie lubi nic innego niz literki i cyferki
        id = strrep(strrep(strrep(strrep(seq.id,'.',''),' ',''),'-',''),'/','');
        id = id(14:30);
        sequenceCluster.("id_" + i) = id;
        i = i + 1;  
    end
end
%%

%TESTING DATA

% sequenceCluster = struct;
% sequenceCluster.("sequence_1") = "GCACATTGGACAT";
% sequenceCluster.("id_1") = "a";
% sequenceCluster.("sequence_2") = "TGAGAAGACAT";
% sequenceCluster.("id_2") = "b";
% sequenceCluster.("sequence_3") = "GACATGAG";
% sequenceCluster.("id_3") = "c";
% sequenceCluster.("sequence_4") = "GAACTCCAGT";
% sequenceCluster.("id_4") = "d";


% sequenceCluster = [
%     "GCACATTGGACAT", "a";
%     "TGAGAAGACAT", "b";
%     "GACATGAG", "c";
%     "GAACTCCAGT","d"];




%%



numberOfSequences = numel(fieldnames(sequenceCluster))/2;
possibleCombinations = numberOfSequences*(0.5*(numberOfSequences+1));
scoringMatrix = getScoringMatrix('subMatrix.txt');
%%
[scoreCluster, alignedSequencesStruct] = alignSequences(numberOfSequences, sequenceCluster,scoringMatrix);
%%
%zsumuj po row
[x,y] = size(scoreCluster)

scoreSums = zeros(1,x);
for i = 1:x
    currentSum = 0;
    for j = 1:y
        currentSum = currentSum + scoreCluster(i,j);
    end
    scoreSums(i) = currentSum;
end
%%

[minValue, minIndex] = min(scoreSums);
centralIdent = char(sequenceCluster.("id_" + minIndex));
%%
centralSequence = sequenceCluster.("id_" + minIndex);

usefulSequencesStruct = usefulSequences(minIndex, alignedSequencesStruct,x);
%%
finalSequenceStruct = multipleSequenceAligment(usefulSequencesStruct,x,centralIdent);

% Próba policzenia kosztu dopasowania ka?dej kolumny
% finalScore = getFinalScore(finalSequenceStruct,scoringMatrix);
% %%
% alignedSequences = char(struct2cell(finalSequenceStruct));
% 
% [down,right] = size(alignedSequences)
% 
% finalScore = 0;
% %i - po fieldsach
% for i = 1:down
%     index = right;
%     rowScore = 0;
%     smallIndex = 1;    
%     for j = i:down
%         while smallIndex < right
%             curScore = findMatch(scoringMatrix,alignedSequences(smallIndex,j),alignedSequences(smallIndex,))
%             smallIndex = smallIndex + 1;
%             rowScore = curScore + rowScore
%         end
%     end
% end
% 
%%

clear all;
clc;

testing = struct;

testing.('ID_1') = 'AAGTCGGT__A___GCGTCGACCAC_G_A_TAAAGTCGGT__A___GCGTCGACCAC_G_A_TA';
testing.('ID_2') = 'AATTCCGAT_ACCAGCG_CA_GCCAC_AA_TAAATTCCGAT_ACCAGCG_CA_GCCAC_AA_TA';
testing.('ID_3') = 'AATCCCCAT_GGCACGGTCA_GCCAC_AAATAAATCCCCAT_GGCACGGTCA_GCCAC_AAATA';

%%
% b = 'ID_2';
% c = 'ID_3';
% seq1 = 'AAGTCGGT__A___GCGTCGACCAC_G_A_TAAAGTCGGT__A___GCGTCGACCAC_G_A_TA';
% seq2 = 'AATTCCGAT_ACCAGCG_CA_GCCAC_AA_TAAATTCCGAT_ACCAGCG_CA_GCCAC_AA_TA';
% seq3 = 'AATCCCCAT_GGCACGGTCA_GCCAC_AAATAAATCCCCAT_GGCACGGTCA_GCCAC_AAATA';

fields = fieldnames(testing)

len = numel(char(testing.(char(fields(1)))))
breaks = ceil(len/60)

%%
testing2 = struct;
for x = 1:numel(fields)
    testing2(x).Header = char(fields(x))
    testing2(x).Sequence = testing.(char(fields(x)))
end

fastawrite('yeet.txt',testing2)

%%

for i = 1:breaks
    fprintf('\n')
    const = 59;
    
    if(i == breaks)
        for f = 1:numel(fields)
            fprintf('\n')
            fprintf('%s\t\t', char(fields(f)))
            fprintf('%c',testing.(char(fields(f)))(const*i-const+1:end))
            fprintf('\t\t%s', const*i-const+1 + " - " + len)
        end
        fprintf('\n')
        fprintf('\t\t\t')
        currentNucleotides = [];
        for j = 1:numel(testing.(char(fields(1)))(const*i-const+1:end))
            for x = 1:numel(fields)
                currentNucleotides = [currentNucleotides, testing.(char(fields(x)))(j)];
            end
            if(all(currentNucleotides == currentNucleotides(1)) && currentNucleotides(1) ~= '_')
                fprintf('%c','*')
            else
                fprintf('%c',' ')
            end
            currentNucleotides = [];
        end
    else
        for f = 1:numel(fields)
            fprintf('\n')
            fprintf('%s\t\t', char(fields(f)))
            fprintf('%c',testing.(char(fields(f)))(const*i-const+1:const*i))
            fprintf('\t\t%s', const*i-const+1 + " - " + const*i)
        end
        fprintf('\n')
        fprintf('\t\t\t')
        currentNucleotides = [];
        for j = 1:numel(testing.(char(fields(1)))(const*i-const+1:const*i))
            for x = 1:numel(fields)
                currentNucleotides = [currentNucleotides, testing.(char(fields(x)))(j)];
            end
            fprintf('%s        ')
            if(all(currentNucleotides == currentNucleotides(1)) && currentNucleotides(1) ~= '_')
                fprintf('%c','*')
            else
                fprintf('%c',' ')
            end
            currentNucleotides = [];
        end
    end

    fprintf('\n')
end


% fprintf('\n','')
% fprintf('%c','AAGTCGGT__A___GCGTCGACCAC_G_A_TA')
% fprintf('\n','')
% fprintf('%c','     ** *******   * * **   *** *')
% fprintf('\n','')




%         fprintf('\n')
%         fprintf('%c',seq1(const*i-const+1:end))
%         fprintf('\n')
%         fprintf('%c',seq2(const*i-const+1:end))    
%         fprintf('\n')
%         fprintf('%c',seq3(const*i-const+1:end))
%         fprintf('\n')

%         fprintf('%c',seq1(const*i-const+1:const*i))
%         fprintf('\n')
%         fprintf('%c',seq2(const*i-const+1:const*i))    
%         fprintf('\n')
%         fprintf('%c',seq3(const*i-const+1:const*i))
%         fprintf('\n')
%         for j = 1:numel(seq1(const*i-const+1:const*i)) 
%             if(seq1(j) == seq2(j) && seq2(j) == seq3(j) && seq1(j) ~= '_')
%                 fprintf('%c','*')
%             else
%                 fprintf('%c',' ')
%             end
%         end



