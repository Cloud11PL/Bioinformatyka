clear all;
clc;

% sequenceCluster = [
%     "GCACAT", "a";
%     "TGAGA", "b";
%     "GACA", "c";
%     "GAACT","d"];
% 
% disp('Choose the method.');
% disp('1. From file');
% disp('2. From database');
% 
% more = true;
% 
% while more
%     method = input('Your choice (type 0 to finish):');
%     if (method == 0)
%         more = false;
%     end
%     seq = getFasta(method);
%     sequenceCluster = [seq.sequence, seq.id]
% end
%%
first = parseFasta(fetchFasta('23'));
second = parseFasta(fetchFasta('33'));
third = parseFasta(fetchFasta('34'));

sequenceCluster = [first.sequence, first.id;
                    second.sequence, second.id;
                    third.sequence, third.id; sequenceCluster];

%%
numberOfSequences = length(sequenceCluster);
possibleCombinations = numberOfSequences*(0.5*(numberOfSequences+1));
scoringMatrix = getScoringMatrix('subMatrix.txt');

[scoreCluster, alignedSequencesStruct] = alignSequences(numberOfSequences, sequenceCluster);

%zsumuj po row
[x,y] = size(scoreCluster)

scoreSums = zeros(1,x);
for i = 1:x
    currentSum = 0;
    for j = 1:y
        currentSum = currentSum + scoreCluster(i,j);
    end
    scoreSums(i) = currentSum;
end


[minValue, minIndex] = min(scoreSums);
centralIdent = char(sequenceCluster(minIndex,2));

centralSequence = sequenceCluster(minIndex);

usefulSequencesStruct = usefulSequences(minIndex, alignedSequencesStruct);

finalSequenceStruct = multipleSequenceAligment(usefulSequenceAligment,x,centralIdent);

% Próba policzenia kosztu dopasowania ka?dej kolumny
% finalScore = getFinalScore(finalSequenceStruct,scoringMatrix);
% %%
% alignedSequences = char(struct2cell(finalSequenceStruct));
% 
% [down,right] = size(alignedSequences)
% 
% finalScore = 0;
% %i - po fieldsach
% for i = 1:down
%     index = right;
%     rowScore = 0;
%     smallIndex = 1;    
%     for j = i:down
%         while smallIndex < right
%             curScore = findMatch(scoringMatrix,alignedSequences(smallIndex,j),alignedSequences(smallIndex,))
%             smallIndex = smallIndex + 1;
%             rowScore = curScore + rowScore
%         end
%     end
% end
% 











